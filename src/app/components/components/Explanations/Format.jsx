var React = require('react');
var Classable = require('../../../mixins/classable.js');
var marked = require('marked');
var fs = require('fs');

var text = fs.readFileSync(__dirname + '/../../../../../resource/explanation.md', 'utf8');

// var text =   "Format placeholders\n---\nFormatting takes place via placeholders within the format string. For example, if a program wanted to print out a person's age, it could present the output by prefixing it with \"Your age is \". To denote that we want the integer for the age to be shown immediately after that message, we may use the format string:\n\n`\"Your age is %d.\"`\n\nThe syntax for a format placeholder is\n\n`%[parameter][flags][width][.precision][length]type`\n\n### Parameter\nParameter can be omitted or can be:\n\nCharacter|Description\n---|---\n`n$`| n is the number of the parameter to display using this format specifier, allowing the parameters provided to be output multiple times, using varying format specifiers or in different orders. If any single placeholder specifies a parameter, all the rest of the placeholders MUST also specify a parameter. This is a POSIX extension and not in C99. <br/> Example: `printf(\"%2$d %2$#x; %1$d %1$#x\",16,17) produces \"17 0x11; 16 0x10\"`\n\n\n### Flags\nFlags can be zero or more (in any order) of:\n\nCharacter|Description\n---|---\n`-`<br/>(minus)| Left-align the output of this placeholder (the default is to right-align the output).\n`+`<br/>(plus)| Prepends a plus for positive signed-numeric types. positive = '+', negative = '-'. (the default doesn't prepend anything in front of positive numbers).\n` `<br/>(space)| Prepends a space for positive signed-numeric types. positive = ' ', negative = '-'. This flag is ignored if the '+' flag exists. (the default doesn't prepend anything in front of positive numbers).\n`0`<br/>(zero)| Prepends zeros for numbers when the width option is specified. (the default prepends spaces). `Example: printf(\"%2d\", 3) produces \" 3\", while printf(\"%02d\", 3) produces in \"03\".`\n`#`<br/>(hash)| Alternate form. For 'g' and 'G', trailing zeros are not removed. For 'f', 'F', 'e', 'E', 'g', 'G', the output always contains a decimal point. For 'o', 'x', and 'X', a 0, 0x, and 0X, respectively, is prepended to non-zero numbers.\n\n### Width\nWidth specifies a minimum number of characters to output, and is typically used to pad fixed-width fields in tabulated output, where the fields would otherwise be smaller, although it does not cause truncation of oversized fields. A leading zero in the width value is interpreted as the zero-padding flag mentioned above, and a negative value is treated as the positive value in conjunction with the left-alignment \"-\" flag also mentioned above.\n\n### Precision\nPrecision usually specifies a maximum limit on the output, depending on the particular formatting type. For floating point numeric types, it specifies the number of digits to the right of the decimal point that the output should be rounded. For the string type, it limits the number of characters that should be output, after which the string is truncated.\n\n### <a name=\"(length*)?\"></a> Length\nLength can be omitted or be any of:\n\nCharacter|Description\n---|---\n`hh`| For integer types, causes printf to expect an int-sized integer argument which was promoted from a char.\n`h`| For integer types, causes printf to expect an int-sized integer argument which was promoted from a short.\n`l`| For integer types, causes printf to expect a long-sized integer argument. <br/> For floating point types, causes printf to expect a double argument.\n`ll`| For integer types, causes printf to expect a long long-sized integer argument.\n`L`| For floating point types, causes printf to expect a long double argument.\n`z`| For integer types, causes printf to expect a size_t-sized integer argument.\n`j`| For integer types, causes printf to expect a intmax_t-sized integer argument.\n`t`| For integer types, causes printf to expect a ptrdiff_t-sized integer argument.\n\n### <a name=\"specfier\"></a> Specifier\nSpecifier can be any of:\n\nCharacter|Description\n---|---\n`d`, `i`| int as a signed decimal number. '%d' and '%i' are synonymous for output, but are different when used with scanf() for input (where using %i will interpret a number as hexadecimal if it's preceded by 0x, and octal if it's preceded by 0.)\n`u`| Print decimal unsigned int.\n`f`, `F`| double in normal (fixed-point) notation. 'f' and 'F' only differs in how the strings for an infinite number or NaN are printed ('inf', 'infinity' and 'nan' for 'f', 'INF', 'INFINITY' and 'NAN' for 'F').\n`e`, `E`| double value in standard form ([-]d.ddd e[+/-]ddd). An E conversion uses the letter E (rather than e) to introduce the exponent. The exponent always contains at least two digits; if the value is zero, the exponent is 00. In Windows, the exponent contains three digits by default, e.g. 1.5e002, but this can be altered by Microsoft-specific _set_output_format function.\n`g`, `G`| double in either normal or exponential notation, whichever is more appropriate for its magnitude. 'g' uses lower-case letters, 'G' uses upper-case letters. This type differs slightly from fixed-point notation in that insignificant zeroes to the right of the decimal point are not included. Also, the decimal point is not included on whole numbers.\n`x`, `X`| unsigned int as a hexadecimal number. 'x' uses lower-case letters and 'X' uses upper-case.\n`o`| unsigned int in octal.\n`s`| null-terminated string.\n`c`| char (character).\n`p`| void * (pointer to void) in an implementation-defined format.\n`a`, `A`| double in hexadecimal notation, starting with \"0x\" or \"0X\". 'a' uses lower-case letters, 'A' uses upper-case letters.[9][10] (C++11 iostreams have a hexfloat that works the same).\n`n`| Print nothing, but write number of characters successfully written so far into an integer pointer parameter.\n`%`| a literal '%' character (this type doesn't accept any flags, width, precision or length).\n\nTake me to [length](#Length)\n"

var Format = React.createClass({
  mixins: [Classable],

  render: function() {
    var classes = this.getClasses('format', {
      "markdown-body": true
    });

    var rawMarkup = marked(text);

    return (
      <div className={classes}>
        <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
      </div>
      );
    }
});

module.exports = Format;
